// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace acu {
class Face;
class FaceDefaultTypeInternal;
extern FaceDefaultTypeInternal _Face_default_instance_;
class FaceList;
class FaceListDefaultTypeInternal;
extern FaceListDefaultTypeInternal _FaceList_default_instance_;
class Landmark;
class LandmarkDefaultTypeInternal;
extern LandmarkDefaultTypeInternal _Landmark_default_instance_;
class LandmarkList;
class LandmarkListDefaultTypeInternal;
extern LandmarkListDefaultTypeInternal _LandmarkList_default_instance_;
class RectF;
class RectFDefaultTypeInternal;
extern RectFDefaultTypeInternal _RectF_default_instance_;
class RectFList;
class RectFListDefaultTypeInternal;
extern RectFListDefaultTypeInternal _RectFList_default_instance_;
}  // namespace acu
PROTOBUF_NAMESPACE_OPEN
template<> ::acu::Face* Arena::CreateMaybeMessage<::acu::Face>(Arena*);
template<> ::acu::FaceList* Arena::CreateMaybeMessage<::acu::FaceList>(Arena*);
template<> ::acu::Landmark* Arena::CreateMaybeMessage<::acu::Landmark>(Arena*);
template<> ::acu::LandmarkList* Arena::CreateMaybeMessage<::acu::LandmarkList>(Arena*);
template<> ::acu::RectF* Arena::CreateMaybeMessage<::acu::RectF>(Arena*);
template<> ::acu::RectFList* Arena::CreateMaybeMessage<::acu::RectFList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace acu {

// ===================================================================

class Landmark PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:acu.Landmark) */ {
 public:
  inline Landmark() : Landmark(nullptr) {};
  virtual ~Landmark();

  Landmark(const Landmark& from);
  Landmark(Landmark&& from) noexcept
    : Landmark() {
    *this = ::std::move(from);
  }

  inline Landmark& operator=(const Landmark& from) {
    CopyFrom(from);
    return *this;
  }
  inline Landmark& operator=(Landmark&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Landmark& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Landmark* internal_default_instance() {
    return reinterpret_cast<const Landmark*>(
               &_Landmark_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Landmark& a, Landmark& b) {
    a.Swap(&b);
  }
  inline void Swap(Landmark* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Landmark* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Landmark* New() const final {
    return CreateMaybeMessage<Landmark>(nullptr);
  }

  Landmark* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Landmark>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Landmark& from);
  void MergeFrom(const Landmark& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Landmark* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "acu.Landmark";
  }
  protected:
  explicit Landmark(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:acu.Landmark)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class LandmarkList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:acu.LandmarkList) */ {
 public:
  inline LandmarkList() : LandmarkList(nullptr) {};
  virtual ~LandmarkList();

  LandmarkList(const LandmarkList& from);
  LandmarkList(LandmarkList&& from) noexcept
    : LandmarkList() {
    *this = ::std::move(from);
  }

  inline LandmarkList& operator=(const LandmarkList& from) {
    CopyFrom(from);
    return *this;
  }
  inline LandmarkList& operator=(LandmarkList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LandmarkList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LandmarkList* internal_default_instance() {
    return reinterpret_cast<const LandmarkList*>(
               &_LandmarkList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LandmarkList& a, LandmarkList& b) {
    a.Swap(&b);
  }
  inline void Swap(LandmarkList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LandmarkList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LandmarkList* New() const final {
    return CreateMaybeMessage<LandmarkList>(nullptr);
  }

  LandmarkList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LandmarkList>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LandmarkList& from);
  void MergeFrom(const LandmarkList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LandmarkList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "acu.LandmarkList";
  }
  protected:
  explicit LandmarkList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLandmarksFieldNumber = 1,
  };
  // repeated .acu.Landmark landmarks = 1;
  int landmarks_size() const;
  private:
  int _internal_landmarks_size() const;
  public:
  void clear_landmarks();
  ::acu::Landmark* mutable_landmarks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::acu::Landmark >*
      mutable_landmarks();
  private:
  const ::acu::Landmark& _internal_landmarks(int index) const;
  ::acu::Landmark* _internal_add_landmarks();
  public:
  const ::acu::Landmark& landmarks(int index) const;
  ::acu::Landmark* add_landmarks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::acu::Landmark >&
      landmarks() const;

  // @@protoc_insertion_point(class_scope:acu.LandmarkList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::acu::Landmark > landmarks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class RectF PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:acu.RectF) */ {
 public:
  inline RectF() : RectF(nullptr) {};
  virtual ~RectF();

  RectF(const RectF& from);
  RectF(RectF&& from) noexcept
    : RectF() {
    *this = ::std::move(from);
  }

  inline RectF& operator=(const RectF& from) {
    CopyFrom(from);
    return *this;
  }
  inline RectF& operator=(RectF&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const RectF& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RectF* internal_default_instance() {
    return reinterpret_cast<const RectF*>(
               &_RectF_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RectF& a, RectF& b) {
    a.Swap(&b);
  }
  inline void Swap(RectF* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RectF* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RectF* New() const final {
    return CreateMaybeMessage<RectF>(nullptr);
  }

  RectF* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RectF>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RectF& from);
  void MergeFrom(const RectF& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RectF* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "acu.RectF";
  }
  protected:
  explicit RectF(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftFieldNumber = 1,
    kTopFieldNumber = 2,
    kRightFieldNumber = 3,
    kBottomFieldNumber = 4,
  };
  // float left = 1;
  void clear_left();
  float left() const;
  void set_left(float value);
  private:
  float _internal_left() const;
  void _internal_set_left(float value);
  public:

  // float top = 2;
  void clear_top();
  float top() const;
  void set_top(float value);
  private:
  float _internal_top() const;
  void _internal_set_top(float value);
  public:

  // float right = 3;
  void clear_right();
  float right() const;
  void set_right(float value);
  private:
  float _internal_right() const;
  void _internal_set_right(float value);
  public:

  // float bottom = 4;
  void clear_bottom();
  float bottom() const;
  void set_bottom(float value);
  private:
  float _internal_bottom() const;
  void _internal_set_bottom(float value);
  public:

  // @@protoc_insertion_point(class_scope:acu.RectF)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float left_;
  float top_;
  float right_;
  float bottom_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class RectFList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:acu.RectFList) */ {
 public:
  inline RectFList() : RectFList(nullptr) {};
  virtual ~RectFList();

  RectFList(const RectFList& from);
  RectFList(RectFList&& from) noexcept
    : RectFList() {
    *this = ::std::move(from);
  }

  inline RectFList& operator=(const RectFList& from) {
    CopyFrom(from);
    return *this;
  }
  inline RectFList& operator=(RectFList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const RectFList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RectFList* internal_default_instance() {
    return reinterpret_cast<const RectFList*>(
               &_RectFList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RectFList& a, RectFList& b) {
    a.Swap(&b);
  }
  inline void Swap(RectFList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RectFList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RectFList* New() const final {
    return CreateMaybeMessage<RectFList>(nullptr);
  }

  RectFList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RectFList>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RectFList& from);
  void MergeFrom(const RectFList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RectFList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "acu.RectFList";
  }
  protected:
  explicit RectFList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRectsFieldNumber = 1,
  };
  // repeated .acu.RectF rects = 1;
  int rects_size() const;
  private:
  int _internal_rects_size() const;
  public:
  void clear_rects();
  ::acu::RectF* mutable_rects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::acu::RectF >*
      mutable_rects();
  private:
  const ::acu::RectF& _internal_rects(int index) const;
  ::acu::RectF* _internal_add_rects();
  public:
  const ::acu::RectF& rects(int index) const;
  ::acu::RectF* add_rects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::acu::RectF >&
      rects() const;

  // @@protoc_insertion_point(class_scope:acu.RectFList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::acu::RectF > rects_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Face PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:acu.Face) */ {
 public:
  inline Face() : Face(nullptr) {};
  virtual ~Face();

  Face(const Face& from);
  Face(Face&& from) noexcept
    : Face() {
    *this = ::std::move(from);
  }

  inline Face& operator=(const Face& from) {
    CopyFrom(from);
    return *this;
  }
  inline Face& operator=(Face&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Face& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Face* internal_default_instance() {
    return reinterpret_cast<const Face*>(
               &_Face_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Face& a, Face& b) {
    a.Swap(&b);
  }
  inline void Swap(Face* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Face* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Face* New() const final {
    return CreateMaybeMessage<Face>(nullptr);
  }

  Face* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Face>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Face& from);
  void MergeFrom(const Face& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Face* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "acu.Face";
  }
  protected:
  explicit Face(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLandmarksFieldNumber = 2,
    kBoundFieldNumber = 1,
  };
  // repeated .acu.Landmark landmarks = 2;
  int landmarks_size() const;
  private:
  int _internal_landmarks_size() const;
  public:
  void clear_landmarks();
  ::acu::Landmark* mutable_landmarks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::acu::Landmark >*
      mutable_landmarks();
  private:
  const ::acu::Landmark& _internal_landmarks(int index) const;
  ::acu::Landmark* _internal_add_landmarks();
  public:
  const ::acu::Landmark& landmarks(int index) const;
  ::acu::Landmark* add_landmarks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::acu::Landmark >&
      landmarks() const;

  // .acu.RectF bound = 1;
  bool has_bound() const;
  private:
  bool _internal_has_bound() const;
  public:
  void clear_bound();
  const ::acu::RectF& bound() const;
  ::acu::RectF* release_bound();
  ::acu::RectF* mutable_bound();
  void set_allocated_bound(::acu::RectF* bound);
  private:
  const ::acu::RectF& _internal_bound() const;
  ::acu::RectF* _internal_mutable_bound();
  public:
  void unsafe_arena_set_allocated_bound(
      ::acu::RectF* bound);
  ::acu::RectF* unsafe_arena_release_bound();

  // @@protoc_insertion_point(class_scope:acu.Face)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::acu::Landmark > landmarks_;
  ::acu::RectF* bound_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class FaceList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:acu.FaceList) */ {
 public:
  inline FaceList() : FaceList(nullptr) {};
  virtual ~FaceList();

  FaceList(const FaceList& from);
  FaceList(FaceList&& from) noexcept
    : FaceList() {
    *this = ::std::move(from);
  }

  inline FaceList& operator=(const FaceList& from) {
    CopyFrom(from);
    return *this;
  }
  inline FaceList& operator=(FaceList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const FaceList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FaceList* internal_default_instance() {
    return reinterpret_cast<const FaceList*>(
               &_FaceList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FaceList& a, FaceList& b) {
    a.Swap(&b);
  }
  inline void Swap(FaceList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FaceList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FaceList* New() const final {
    return CreateMaybeMessage<FaceList>(nullptr);
  }

  FaceList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FaceList>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FaceList& from);
  void MergeFrom(const FaceList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FaceList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "acu.FaceList";
  }
  protected:
  explicit FaceList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFacesFieldNumber = 1,
  };
  // repeated .acu.Face faces = 1;
  int faces_size() const;
  private:
  int _internal_faces_size() const;
  public:
  void clear_faces();
  ::acu::Face* mutable_faces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::acu::Face >*
      mutable_faces();
  private:
  const ::acu::Face& _internal_faces(int index) const;
  ::acu::Face* _internal_add_faces();
  public:
  const ::acu::Face& faces(int index) const;
  ::acu::Face* add_faces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::acu::Face >&
      faces() const;

  // @@protoc_insertion_point(class_scope:acu.FaceList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::acu::Face > faces_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Landmark

// float x = 1;
inline void Landmark::clear_x() {
  x_ = 0;
}
inline float Landmark::_internal_x() const {
  return x_;
}
inline float Landmark::x() const {
  // @@protoc_insertion_point(field_get:acu.Landmark.x)
  return _internal_x();
}
inline void Landmark::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Landmark::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:acu.Landmark.x)
}

// float y = 2;
inline void Landmark::clear_y() {
  y_ = 0;
}
inline float Landmark::_internal_y() const {
  return y_;
}
inline float Landmark::y() const {
  // @@protoc_insertion_point(field_get:acu.Landmark.y)
  return _internal_y();
}
inline void Landmark::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Landmark::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:acu.Landmark.y)
}

// -------------------------------------------------------------------

// LandmarkList

// repeated .acu.Landmark landmarks = 1;
inline int LandmarkList::_internal_landmarks_size() const {
  return landmarks_.size();
}
inline int LandmarkList::landmarks_size() const {
  return _internal_landmarks_size();
}
inline void LandmarkList::clear_landmarks() {
  landmarks_.Clear();
}
inline ::acu::Landmark* LandmarkList::mutable_landmarks(int index) {
  // @@protoc_insertion_point(field_mutable:acu.LandmarkList.landmarks)
  return landmarks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::acu::Landmark >*
LandmarkList::mutable_landmarks() {
  // @@protoc_insertion_point(field_mutable_list:acu.LandmarkList.landmarks)
  return &landmarks_;
}
inline const ::acu::Landmark& LandmarkList::_internal_landmarks(int index) const {
  return landmarks_.Get(index);
}
inline const ::acu::Landmark& LandmarkList::landmarks(int index) const {
  // @@protoc_insertion_point(field_get:acu.LandmarkList.landmarks)
  return _internal_landmarks(index);
}
inline ::acu::Landmark* LandmarkList::_internal_add_landmarks() {
  return landmarks_.Add();
}
inline ::acu::Landmark* LandmarkList::add_landmarks() {
  // @@protoc_insertion_point(field_add:acu.LandmarkList.landmarks)
  return _internal_add_landmarks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::acu::Landmark >&
LandmarkList::landmarks() const {
  // @@protoc_insertion_point(field_list:acu.LandmarkList.landmarks)
  return landmarks_;
}

// -------------------------------------------------------------------

// RectF

// float left = 1;
inline void RectF::clear_left() {
  left_ = 0;
}
inline float RectF::_internal_left() const {
  return left_;
}
inline float RectF::left() const {
  // @@protoc_insertion_point(field_get:acu.RectF.left)
  return _internal_left();
}
inline void RectF::_internal_set_left(float value) {
  
  left_ = value;
}
inline void RectF::set_left(float value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:acu.RectF.left)
}

// float top = 2;
inline void RectF::clear_top() {
  top_ = 0;
}
inline float RectF::_internal_top() const {
  return top_;
}
inline float RectF::top() const {
  // @@protoc_insertion_point(field_get:acu.RectF.top)
  return _internal_top();
}
inline void RectF::_internal_set_top(float value) {
  
  top_ = value;
}
inline void RectF::set_top(float value) {
  _internal_set_top(value);
  // @@protoc_insertion_point(field_set:acu.RectF.top)
}

// float right = 3;
inline void RectF::clear_right() {
  right_ = 0;
}
inline float RectF::_internal_right() const {
  return right_;
}
inline float RectF::right() const {
  // @@protoc_insertion_point(field_get:acu.RectF.right)
  return _internal_right();
}
inline void RectF::_internal_set_right(float value) {
  
  right_ = value;
}
inline void RectF::set_right(float value) {
  _internal_set_right(value);
  // @@protoc_insertion_point(field_set:acu.RectF.right)
}

// float bottom = 4;
inline void RectF::clear_bottom() {
  bottom_ = 0;
}
inline float RectF::_internal_bottom() const {
  return bottom_;
}
inline float RectF::bottom() const {
  // @@protoc_insertion_point(field_get:acu.RectF.bottom)
  return _internal_bottom();
}
inline void RectF::_internal_set_bottom(float value) {
  
  bottom_ = value;
}
inline void RectF::set_bottom(float value) {
  _internal_set_bottom(value);
  // @@protoc_insertion_point(field_set:acu.RectF.bottom)
}

// -------------------------------------------------------------------

// RectFList

// repeated .acu.RectF rects = 1;
inline int RectFList::_internal_rects_size() const {
  return rects_.size();
}
inline int RectFList::rects_size() const {
  return _internal_rects_size();
}
inline void RectFList::clear_rects() {
  rects_.Clear();
}
inline ::acu::RectF* RectFList::mutable_rects(int index) {
  // @@protoc_insertion_point(field_mutable:acu.RectFList.rects)
  return rects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::acu::RectF >*
RectFList::mutable_rects() {
  // @@protoc_insertion_point(field_mutable_list:acu.RectFList.rects)
  return &rects_;
}
inline const ::acu::RectF& RectFList::_internal_rects(int index) const {
  return rects_.Get(index);
}
inline const ::acu::RectF& RectFList::rects(int index) const {
  // @@protoc_insertion_point(field_get:acu.RectFList.rects)
  return _internal_rects(index);
}
inline ::acu::RectF* RectFList::_internal_add_rects() {
  return rects_.Add();
}
inline ::acu::RectF* RectFList::add_rects() {
  // @@protoc_insertion_point(field_add:acu.RectFList.rects)
  return _internal_add_rects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::acu::RectF >&
RectFList::rects() const {
  // @@protoc_insertion_point(field_list:acu.RectFList.rects)
  return rects_;
}

// -------------------------------------------------------------------

// Face

// .acu.RectF bound = 1;
inline bool Face::_internal_has_bound() const {
  return this != internal_default_instance() && bound_ != nullptr;
}
inline bool Face::has_bound() const {
  return _internal_has_bound();
}
inline void Face::clear_bound() {
  if (GetArena() == nullptr && bound_ != nullptr) {
    delete bound_;
  }
  bound_ = nullptr;
}
inline const ::acu::RectF& Face::_internal_bound() const {
  const ::acu::RectF* p = bound_;
  return p != nullptr ? *p : *reinterpret_cast<const ::acu::RectF*>(
      &::acu::_RectF_default_instance_);
}
inline const ::acu::RectF& Face::bound() const {
  // @@protoc_insertion_point(field_get:acu.Face.bound)
  return _internal_bound();
}
inline void Face::unsafe_arena_set_allocated_bound(
    ::acu::RectF* bound) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bound_);
  }
  bound_ = bound;
  if (bound) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:acu.Face.bound)
}
inline ::acu::RectF* Face::release_bound() {
  auto temp = unsafe_arena_release_bound();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::acu::RectF* Face::unsafe_arena_release_bound() {
  // @@protoc_insertion_point(field_release:acu.Face.bound)
  
  ::acu::RectF* temp = bound_;
  bound_ = nullptr;
  return temp;
}
inline ::acu::RectF* Face::_internal_mutable_bound() {
  
  if (bound_ == nullptr) {
    auto* p = CreateMaybeMessage<::acu::RectF>(GetArena());
    bound_ = p;
  }
  return bound_;
}
inline ::acu::RectF* Face::mutable_bound() {
  // @@protoc_insertion_point(field_mutable:acu.Face.bound)
  return _internal_mutable_bound();
}
inline void Face::set_allocated_bound(::acu::RectF* bound) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bound_;
  }
  if (bound) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bound);
    if (message_arena != submessage_arena) {
      bound = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bound, submessage_arena);
    }
    
  } else {
    
  }
  bound_ = bound;
  // @@protoc_insertion_point(field_set_allocated:acu.Face.bound)
}

// repeated .acu.Landmark landmarks = 2;
inline int Face::_internal_landmarks_size() const {
  return landmarks_.size();
}
inline int Face::landmarks_size() const {
  return _internal_landmarks_size();
}
inline void Face::clear_landmarks() {
  landmarks_.Clear();
}
inline ::acu::Landmark* Face::mutable_landmarks(int index) {
  // @@protoc_insertion_point(field_mutable:acu.Face.landmarks)
  return landmarks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::acu::Landmark >*
Face::mutable_landmarks() {
  // @@protoc_insertion_point(field_mutable_list:acu.Face.landmarks)
  return &landmarks_;
}
inline const ::acu::Landmark& Face::_internal_landmarks(int index) const {
  return landmarks_.Get(index);
}
inline const ::acu::Landmark& Face::landmarks(int index) const {
  // @@protoc_insertion_point(field_get:acu.Face.landmarks)
  return _internal_landmarks(index);
}
inline ::acu::Landmark* Face::_internal_add_landmarks() {
  return landmarks_.Add();
}
inline ::acu::Landmark* Face::add_landmarks() {
  // @@protoc_insertion_point(field_add:acu.Face.landmarks)
  return _internal_add_landmarks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::acu::Landmark >&
Face::landmarks() const {
  // @@protoc_insertion_point(field_list:acu.Face.landmarks)
  return landmarks_;
}

// -------------------------------------------------------------------

// FaceList

// repeated .acu.Face faces = 1;
inline int FaceList::_internal_faces_size() const {
  return faces_.size();
}
inline int FaceList::faces_size() const {
  return _internal_faces_size();
}
inline void FaceList::clear_faces() {
  faces_.Clear();
}
inline ::acu::Face* FaceList::mutable_faces(int index) {
  // @@protoc_insertion_point(field_mutable:acu.FaceList.faces)
  return faces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::acu::Face >*
FaceList::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:acu.FaceList.faces)
  return &faces_;
}
inline const ::acu::Face& FaceList::_internal_faces(int index) const {
  return faces_.Get(index);
}
inline const ::acu::Face& FaceList::faces(int index) const {
  // @@protoc_insertion_point(field_get:acu.FaceList.faces)
  return _internal_faces(index);
}
inline ::acu::Face* FaceList::_internal_add_faces() {
  return faces_.Add();
}
inline ::acu::Face* FaceList::add_faces() {
  // @@protoc_insertion_point(field_add:acu.FaceList.faces)
  return _internal_add_faces();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::acu::Face >&
FaceList::faces() const {
  // @@protoc_insertion_point(field_list:acu.FaceList.faces)
  return faces_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace acu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
