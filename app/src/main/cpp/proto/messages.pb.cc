// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#include "messages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Face_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Landmark_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RectF_messages_2eproto;
namespace acu {
class LandmarkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Landmark> _instance;
} _Landmark_default_instance_;
class LandmarkListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LandmarkList> _instance;
} _LandmarkList_default_instance_;
class RectFDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RectF> _instance;
} _RectF_default_instance_;
class RectFListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RectFList> _instance;
} _RectFList_default_instance_;
class FaceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Face> _instance;
} _Face_default_instance_;
class FaceListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FaceList> _instance;
} _FaceList_default_instance_;
}  // namespace acu
static void InitDefaultsscc_info_Face_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::acu::_Face_default_instance_;
    new (ptr) ::acu::Face();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::Face::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Face_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Face_messages_2eproto}, {
      &scc_info_RectF_messages_2eproto.base,
      &scc_info_Landmark_messages_2eproto.base,}};

static void InitDefaultsscc_info_FaceList_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::acu::_FaceList_default_instance_;
    new (ptr) ::acu::FaceList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::FaceList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FaceList_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FaceList_messages_2eproto}, {
      &scc_info_Face_messages_2eproto.base,}};

static void InitDefaultsscc_info_Landmark_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::acu::_Landmark_default_instance_;
    new (ptr) ::acu::Landmark();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::Landmark::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Landmark_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Landmark_messages_2eproto}, {}};

static void InitDefaultsscc_info_LandmarkList_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::acu::_LandmarkList_default_instance_;
    new (ptr) ::acu::LandmarkList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::LandmarkList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LandmarkList_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LandmarkList_messages_2eproto}, {
      &scc_info_Landmark_messages_2eproto.base,}};

static void InitDefaultsscc_info_RectF_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::acu::_RectF_default_instance_;
    new (ptr) ::acu::RectF();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::RectF::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RectF_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RectF_messages_2eproto}, {}};

static void InitDefaultsscc_info_RectFList_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::acu::_RectFList_default_instance_;
    new (ptr) ::acu::RectFList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::RectFList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RectFList_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RectFList_messages_2eproto}, {
      &scc_info_RectF_messages_2eproto.base,}};

namespace acu {

// ===================================================================

void Landmark::InitAsDefaultInstance() {
}
class Landmark::_Internal {
 public:
};

Landmark::Landmark(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:acu.Landmark)
}
Landmark::Landmark(const Landmark& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:acu.Landmark)
}

void Landmark::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Landmark::~Landmark() {
  // @@protoc_insertion_point(destructor:acu.Landmark)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Landmark::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Landmark::ArenaDtor(void* object) {
  Landmark* _this = reinterpret_cast< Landmark* >(object);
  (void)_this;
}
void Landmark::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Landmark::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Landmark& Landmark::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Landmark_messages_2eproto.base);
  return *internal_default_instance();
}


void Landmark::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.Landmark)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<std::string>();
}

const char* Landmark::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Landmark::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:acu.Landmark)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.Landmark)
  return target;
}

size_t Landmark::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.Landmark)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Landmark::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Landmark*>(
      &from));
}

void Landmark::MergeFrom(const Landmark& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.Landmark)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void Landmark::CopyFrom(const Landmark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.Landmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Landmark::IsInitialized() const {
  return true;
}

void Landmark::InternalSwap(Landmark* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Landmark, y_)
      + sizeof(Landmark::y_)
      - PROTOBUF_FIELD_OFFSET(Landmark, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

std::string Landmark::GetTypeName() const {
  return "acu.Landmark";
}


// ===================================================================

void LandmarkList::InitAsDefaultInstance() {
}
class LandmarkList::_Internal {
 public:
};

LandmarkList::LandmarkList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  landmarks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:acu.LandmarkList)
}
LandmarkList::LandmarkList(const LandmarkList& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      landmarks_(from.landmarks_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:acu.LandmarkList)
}

void LandmarkList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LandmarkList_messages_2eproto.base);
}

LandmarkList::~LandmarkList() {
  // @@protoc_insertion_point(destructor:acu.LandmarkList)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void LandmarkList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LandmarkList::ArenaDtor(void* object) {
  LandmarkList* _this = reinterpret_cast< LandmarkList* >(object);
  (void)_this;
}
void LandmarkList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LandmarkList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LandmarkList& LandmarkList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LandmarkList_messages_2eproto.base);
  return *internal_default_instance();
}


void LandmarkList::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.LandmarkList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  landmarks_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LandmarkList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .acu.Landmark landmarks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_landmarks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LandmarkList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:acu.LandmarkList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .acu.Landmark landmarks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_landmarks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_landmarks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.LandmarkList)
  return target;
}

size_t LandmarkList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.LandmarkList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .acu.Landmark landmarks = 1;
  total_size += 1UL * this->_internal_landmarks_size();
  for (const auto& msg : this->landmarks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LandmarkList::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LandmarkList*>(
      &from));
}

void LandmarkList::MergeFrom(const LandmarkList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.LandmarkList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  landmarks_.MergeFrom(from.landmarks_);
}

void LandmarkList::CopyFrom(const LandmarkList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.LandmarkList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandmarkList::IsInitialized() const {
  return true;
}

void LandmarkList::InternalSwap(LandmarkList* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  landmarks_.InternalSwap(&other->landmarks_);
}

std::string LandmarkList::GetTypeName() const {
  return "acu.LandmarkList";
}


// ===================================================================

void RectF::InitAsDefaultInstance() {
}
class RectF::_Internal {
 public:
};

RectF::RectF(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:acu.RectF)
}
RectF::RectF(const RectF& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&left_, &from.left_,
    static_cast<size_t>(reinterpret_cast<char*>(&bottom_) -
    reinterpret_cast<char*>(&left_)) + sizeof(bottom_));
  // @@protoc_insertion_point(copy_constructor:acu.RectF)
}

void RectF::SharedCtor() {
  ::memset(&left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bottom_) -
      reinterpret_cast<char*>(&left_)) + sizeof(bottom_));
}

RectF::~RectF() {
  // @@protoc_insertion_point(destructor:acu.RectF)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void RectF::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RectF::ArenaDtor(void* object) {
  RectF* _this = reinterpret_cast< RectF* >(object);
  (void)_this;
}
void RectF::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RectF::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RectF& RectF::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RectF_messages_2eproto.base);
  return *internal_default_instance();
}


void RectF::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.RectF)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bottom_) -
      reinterpret_cast<char*>(&left_)) + sizeof(bottom_));
  _internal_metadata_.Clear<std::string>();
}

const char* RectF::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float top = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          top_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float right = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float bottom = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          bottom_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RectF::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:acu.RectF)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float left = 1;
  if (!(this->left() <= 0 && this->left() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_left(), target);
  }

  // float top = 2;
  if (!(this->top() <= 0 && this->top() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_top(), target);
  }

  // float right = 3;
  if (!(this->right() <= 0 && this->right() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_right(), target);
  }

  // float bottom = 4;
  if (!(this->bottom() <= 0 && this->bottom() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_bottom(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.RectF)
  return target;
}

size_t RectF::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.RectF)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float left = 1;
  if (!(this->left() <= 0 && this->left() >= 0)) {
    total_size += 1 + 4;
  }

  // float top = 2;
  if (!(this->top() <= 0 && this->top() >= 0)) {
    total_size += 1 + 4;
  }

  // float right = 3;
  if (!(this->right() <= 0 && this->right() >= 0)) {
    total_size += 1 + 4;
  }

  // float bottom = 4;
  if (!(this->bottom() <= 0 && this->bottom() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RectF::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RectF*>(
      &from));
}

void RectF::MergeFrom(const RectF& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.RectF)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.left() <= 0 && from.left() >= 0)) {
    _internal_set_left(from._internal_left());
  }
  if (!(from.top() <= 0 && from.top() >= 0)) {
    _internal_set_top(from._internal_top());
  }
  if (!(from.right() <= 0 && from.right() >= 0)) {
    _internal_set_right(from._internal_right());
  }
  if (!(from.bottom() <= 0 && from.bottom() >= 0)) {
    _internal_set_bottom(from._internal_bottom());
  }
}

void RectF::CopyFrom(const RectF& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.RectF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RectF::IsInitialized() const {
  return true;
}

void RectF::InternalSwap(RectF* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RectF, bottom_)
      + sizeof(RectF::bottom_)
      - PROTOBUF_FIELD_OFFSET(RectF, left_)>(
          reinterpret_cast<char*>(&left_),
          reinterpret_cast<char*>(&other->left_));
}

std::string RectF::GetTypeName() const {
  return "acu.RectF";
}


// ===================================================================

void RectFList::InitAsDefaultInstance() {
}
class RectFList::_Internal {
 public:
};

RectFList::RectFList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  rects_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:acu.RectFList)
}
RectFList::RectFList(const RectFList& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      rects_(from.rects_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:acu.RectFList)
}

void RectFList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RectFList_messages_2eproto.base);
}

RectFList::~RectFList() {
  // @@protoc_insertion_point(destructor:acu.RectFList)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void RectFList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RectFList::ArenaDtor(void* object) {
  RectFList* _this = reinterpret_cast< RectFList* >(object);
  (void)_this;
}
void RectFList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RectFList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RectFList& RectFList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RectFList_messages_2eproto.base);
  return *internal_default_instance();
}


void RectFList::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.RectFList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rects_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RectFList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .acu.RectF rects = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RectFList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:acu.RectFList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .acu.RectF rects = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_rects(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.RectFList)
  return target;
}

size_t RectFList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.RectFList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .acu.RectF rects = 1;
  total_size += 1UL * this->_internal_rects_size();
  for (const auto& msg : this->rects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RectFList::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RectFList*>(
      &from));
}

void RectFList::MergeFrom(const RectFList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.RectFList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rects_.MergeFrom(from.rects_);
}

void RectFList::CopyFrom(const RectFList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.RectFList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RectFList::IsInitialized() const {
  return true;
}

void RectFList::InternalSwap(RectFList* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  rects_.InternalSwap(&other->rects_);
}

std::string RectFList::GetTypeName() const {
  return "acu.RectFList";
}


// ===================================================================

void Face::InitAsDefaultInstance() {
  ::acu::_Face_default_instance_._instance.get_mutable()->bound_ = const_cast< ::acu::RectF*>(
      ::acu::RectF::internal_default_instance());
}
class Face::_Internal {
 public:
  static const ::acu::RectF& bound(const Face* msg);
};

const ::acu::RectF&
Face::_Internal::bound(const Face* msg) {
  return *msg->bound_;
}
Face::Face(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  landmarks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:acu.Face)
}
Face::Face(const Face& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      landmarks_(from.landmarks_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_bound()) {
    bound_ = new ::acu::RectF(*from.bound_);
  } else {
    bound_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:acu.Face)
}

void Face::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Face_messages_2eproto.base);
  bound_ = nullptr;
}

Face::~Face() {
  // @@protoc_insertion_point(destructor:acu.Face)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Face::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete bound_;
}

void Face::ArenaDtor(void* object) {
  Face* _this = reinterpret_cast< Face* >(object);
  (void)_this;
}
void Face::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Face::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Face& Face::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Face_messages_2eproto.base);
  return *internal_default_instance();
}


void Face::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.Face)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  landmarks_.Clear();
  if (GetArena() == nullptr && bound_ != nullptr) {
    delete bound_;
  }
  bound_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* Face::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .acu.RectF bound = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bound(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .acu.Landmark landmarks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_landmarks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Face::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:acu.Face)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .acu.RectF bound = 1;
  if (this->has_bound()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bound(this), target, stream);
  }

  // repeated .acu.Landmark landmarks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_landmarks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_landmarks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.Face)
  return target;
}

size_t Face::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.Face)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .acu.Landmark landmarks = 2;
  total_size += 1UL * this->_internal_landmarks_size();
  for (const auto& msg : this->landmarks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .acu.RectF bound = 1;
  if (this->has_bound()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bound_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Face::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Face*>(
      &from));
}

void Face::MergeFrom(const Face& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.Face)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  landmarks_.MergeFrom(from.landmarks_);
  if (from.has_bound()) {
    _internal_mutable_bound()->::acu::RectF::MergeFrom(from._internal_bound());
  }
}

void Face::CopyFrom(const Face& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.Face)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Face::IsInitialized() const {
  return true;
}

void Face::InternalSwap(Face* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  landmarks_.InternalSwap(&other->landmarks_);
  swap(bound_, other->bound_);
}

std::string Face::GetTypeName() const {
  return "acu.Face";
}


// ===================================================================

void FaceList::InitAsDefaultInstance() {
}
class FaceList::_Internal {
 public:
};

FaceList::FaceList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  faces_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:acu.FaceList)
}
FaceList::FaceList(const FaceList& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      faces_(from.faces_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:acu.FaceList)
}

void FaceList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FaceList_messages_2eproto.base);
}

FaceList::~FaceList() {
  // @@protoc_insertion_point(destructor:acu.FaceList)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void FaceList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FaceList::ArenaDtor(void* object) {
  FaceList* _this = reinterpret_cast< FaceList* >(object);
  (void)_this;
}
void FaceList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FaceList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FaceList& FaceList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FaceList_messages_2eproto.base);
  return *internal_default_instance();
}


void FaceList::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.FaceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  faces_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FaceList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .acu.Face faces = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_faces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FaceList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:acu.FaceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .acu.Face faces = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_faces_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_faces(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.FaceList)
  return target;
}

size_t FaceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.FaceList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .acu.Face faces = 1;
  total_size += 1UL * this->_internal_faces_size();
  for (const auto& msg : this->faces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaceList::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FaceList*>(
      &from));
}

void FaceList::MergeFrom(const FaceList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.FaceList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  faces_.MergeFrom(from.faces_);
}

void FaceList::CopyFrom(const FaceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.FaceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceList::IsInitialized() const {
  return true;
}

void FaceList::InternalSwap(FaceList* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  faces_.InternalSwap(&other->faces_);
}

std::string FaceList::GetTypeName() const {
  return "acu.FaceList";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace acu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::acu::Landmark* Arena::CreateMaybeMessage< ::acu::Landmark >(Arena* arena) {
  return Arena::CreateMessageInternal< ::acu::Landmark >(arena);
}
template<> PROTOBUF_NOINLINE ::acu::LandmarkList* Arena::CreateMaybeMessage< ::acu::LandmarkList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::acu::LandmarkList >(arena);
}
template<> PROTOBUF_NOINLINE ::acu::RectF* Arena::CreateMaybeMessage< ::acu::RectF >(Arena* arena) {
  return Arena::CreateMessageInternal< ::acu::RectF >(arena);
}
template<> PROTOBUF_NOINLINE ::acu::RectFList* Arena::CreateMaybeMessage< ::acu::RectFList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::acu::RectFList >(arena);
}
template<> PROTOBUF_NOINLINE ::acu::Face* Arena::CreateMaybeMessage< ::acu::Face >(Arena* arena) {
  return Arena::CreateMessageInternal< ::acu::Face >(arena);
}
template<> PROTOBUF_NOINLINE ::acu::FaceList* Arena::CreateMaybeMessage< ::acu::FaceList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::acu::FaceList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
